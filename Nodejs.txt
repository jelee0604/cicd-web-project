1. nodejs / nodemon
   restapi
   json viewer chrome extension
   postman-9.12

2. wargame
   burpsuite community(2021_2_1)

3. Docker Desktop
   kitematic

4. virtualbox
   kali-linux-2021.4a~.ova









const express = require('express');
const app = express();
const port = process.env.PORT || 3000;
const Joi = require('joi'); // 클래스를 반환하므로 변수를 대문자로 함

app.use(express.json());	//json parsing하기 위해 사용

const courses = [
    { id: 1, name: 'course1'},
    { id: 2, name: 'course2'},
    { id: 3, name: 'course3'},
];

app.get('/', (req, res) => {
    res.send('Hello World');
}) //arg: url(path), callback

app.get('/api/posts/:year/:month', (req, res) => {
    res.send(req.params);
})

app.get('/api/posts/:year/:month', (req, res) => {
    res.send(req.query);
})

//app.get('/api/courses', (req, res)=>{
//    res.send(courses);
//});

//app.post('/api/courses', (req, res)=>{
//    const course = {
//        id: courses.length + 1,
//        name: req.body.name
//    };
//    courses.push(course);
//    res.send(course);
//});
// 나중에는 id는 데이터베이스에 의해 자동으로 할당될 것임.

//app.post('/api/courses/', (req, res) => {
//    if(!req.body.name || req.body.name.length < 3){
//        // 400 Bad Request
//        res.status(400).send('Name is required and should be minimum 3 characters.');
//        return;
//    }

//    const course = {
//        id: courses.length + 1,
//        name: req.body.name
//    };
//    courses.push(course);
//    res.send(course);
//});

app.post('/api/courses/', (req, res) => {
    const schema = Joi.object({
        name: Joi.string().min(3).required(),
	email: Joi.string().min(6).required().email(),
	password: Joi.string().min(6).required()
    });

    //const result = Joi.validate(req.body, schema);
    const validation = schema.validate(req.body);
    console.log(validation);

    if(!req.body.name || req.body.name.length < 3){
        // 400 Bad Request
        //res.status(400).send('Name is required and should be minimum 3 characters.');
	//res.status(400).send(validation.error);
	res.status(400).send(validation.error.details[0].message);
        return;
    }

    const course = {
        id: courses.length + 1,
        name: req.body.name
    };
    courses.push(course);
    res.send(course);
});

//app.get('/api/courses/:id', (req, res)=>{
//    res.send(req.params.id);
//});

//app.get('/api/courses/:id', (req, res) => {
//    const course = courses.find(c => c.id === parseInt(req.params.id))  
//    if(!course) res.status(404).send('The course with the given ID was not found');
//    res.send(course);
//});

app.listen(port, () => console.log('Listening on port ${port}'));










//맨윗줄에
const Joi = require('joi'); // 클래스를 반환하므로 변수를 대문자로 함

///////////////////////

app.post('/api/courses/', (req, res) => {
    const schema = {
        name: Joi.string().min(3).required()
    };

    const result = Joi.validate(req.body, schema);
    console.log(result);

    if(!req.body.name || req.body.name.length < 3){
        // 400 Bad Request
        res.status(400).send('Name is required and should be minimum 3 characters.');
        return;
    }

    const course = {
        id: courses.length + 1,
        name: req.body.name
    };
    courses.push(course);
    res.send(course);
});


















[GET]
http://localhost:3000/api/user


[POST]
http://localhost:3000/api/user
Headers
	key : Content-Type
	value : application/json
Body:raw
{
    "id":"nalchi",
    "name":"hongildong",
    "email":"hong@gmail.com"
}



[PUT]
http://localhost:3000/api/user/manhunt
Headers
	key : Content-Type
	value : application/json
Body:raw
{
    "name":"John",
    "email":"John@naver.com"
}





[DELETE]
http://localhost:3000/api/user/manhunt
Headers
	key : Content-Type
	value : application/json









